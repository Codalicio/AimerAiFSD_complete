TOPIC : GIT AND GITHUB

1.) Introduction to Version Control System and Git :

Question) - How will you maintain different versions of a file?
Answer) - Create a copy of the file and make changes to the new file created!

Question) - What is a version?
Answer) - A version is a instance of a project at a specific point of time.

Question) - Why do we need to maintain the version?
Answer) - If a need arises, we can easily propagate between versions and this can only be achieved if we maintained and kept track of the changes/versions in the first place.

Question) - What are the challenges or issues with the Manual Version Control?
Answer) - Issues/challenges with Manual Version Control :
* It will be difficult to identify the changes between two files.
* Not efficient with Projects having thousands of files.
* Difficult to collaborate with the Team and other programmers.
* Difficult to store metadata, such as who made what changes, date and the reason.
Thus, it is quite difficult to maintain file versions manually and this is where the Version Control System comes to the rescue.
For Example - Basic Version Control System is available on Google Drive also.

Question) - What is Version Control System(VCS)?
Answer) - Version Control System(VCS) is a tool/software that helps us in managing the code better like the changes made to a specific directory or a Project over the course of time. Version Control System(VCS) are sometimes known as SCM(Source Code Management) tools or RCS(Revision Control System).
And one of the most used VCS tool today is called Git.

Question) - What are the advantages of using a Version Control System(VCS)?
Answer) -
Following can be considered as the advantages of using a Version Control System(VCS) :
* One can maintain and track all the changes/modifications done between different versions of a file and can also store the metadata for all the individual changes for better reference.
* You can make a remote copy of the Project and if some file or folders got deleted or lost from the local, then we can get it from the remote server, and also we can download the entire Project from the remote to our local machine as well.
* It helps in making it easy to create backups and revert changes whenever needed.
* And we can easily collaborate with other developers, programmers, team members and peers efficiently.
* It also makes sharing code on multiple systems, with multiple users easy.
* It is highly efficient for large Project with thousands of files.

Question) - What is a Local Git Repository?
Answer) - The Repository created/initialized on our local machine is said to be a Local Git Repository.

Question) - What is a Central Git Repository?
Answer) - We can upload our Local Git Repository to a server, which includes all the versions of the code. Such a repository is called a Remote Git Repository, which is also known as a Central Repository.


COLLABORATIONS :

* Central Git Repository/Remote Git Repository is created by uploading our Local Git Repository to a remote server like "Github" constituting all the versions of the code.
* Collaborators can download this Remote Git Repository as their Local Git Repo.
* They can make changes to their Local Git Repo and add new versions.
* They can also update the Remote Git Repo by pushing the newly added versions to the Remote Git Repo.
* Other collaborators can download and update their Local copies with the new changes.


Question) - What is a push operation?
Answer) - When code from Local Git Repo is sent to a Remote server or Remote Repo, this operation is called a push.

Question) - What is a pull operation?
Answer) - When code from Remote server or Remote Repo is fetched backed in one's Local Git Repo, this operation is called as pull.


Some KEYWORDS related to VERSION CONTROL SYSTEM(VCS) :

*) REMOTE / CENTRAL / MASTER REPOSITORY :
- A Repository hosted on a server/cloud service like "GitHub", "Bitbucket", etc., where we can store the main codebase.

*) LOCAL GIT REPOSITORY :
- A Local Repository where we store all the changes before pushing to the Remote Repository.

*) Pushing : 
- Pushing the changes made locally to Remote Repo.

*) Pulling :
- Pulling the current state of a Project including all the updates/changes from a Remote Repository.

*) Master / Main :
- Main branch in which all the deployable changes are stored.

*) Head :
- Pointer to the current branch or state of the code.

Question) - What is Git and why we should use Git?
Answer) - 
Git is one of the most popular amongst VCS's.
As of 2025, the most popular version control systems with significant market share are likely to be: Git (dominant market share), GitHub, GitLab, Bitbucket, AWS CodeCommit, with smaller shares held by Subversion (SVN), Perforce, and Helix Core; with Git widely considered the leading option due to its open-source nature, ease of use, and distributed version control capabilities.

Key points about these systems:

• Git: The most widely used version control system, offering a distributed approach with excellent performance for both small and large projects.

• GitHub: A popular hosting platform for Git repositories, providing features like collaborative coding, project management, and issue tracking.

• GitLab: Another popular Git hosting platform with integrated CI/CD capabilities and robust project management features.

• Bitbucket: Primarily used within the Atlassian ecosystem, integrating with tools like Jira for project management.

• AWS CodeCommit: A fully managed Git service offered by Amazon Web Services, allowing for secure private repositories within the AWS cloud.

• Subversion (SVN): A centralized version control system, still used by some organizations due to its familiarity, but considered less flexible than Git.

• Perforce: A commercial version control system often used by large enterprises for managing complex projects with many files and users.

• Helix Core: A powerful system favored by companies in industries like gaming and semiconductors due to its scalability and advanced features.

*Note : Oracle does not uses Git.


2.) Starting with Git :

* Creator of Git and Linux are the same person(Linus Torvalds).
* Git was created by Linus Torvalds, who was also the creator of Linux.

Benefits of using Git :

* Its faster as most of the operations are performed locally.
* It enables flexible version control.
* It is quite easy to revert changes and move to the previous state seamlessly when using Git.
* It's useful for distributed teams, i.e.geographically.
* It maintains integrity while using hash values.

Git Vs GitHub : 

Question) - Are Git and GitHub the same?
Answer) - No.

* Git :
- It is an open-source Version Control tool that is used by programmers for controlling versions of their codebase and collaborate with others. We can install our own Git server on our server. Most cloud providers also provide the same. It is more like using commands.

* GitHub :
- It is the most common online Git service where we can create Remote Repositories based on Git. It is more like using a website. In GitHub, we use the GitHub's UI to use Git.

Alternatives to GitHub:
* BitBucket
* GitLab
* SourceForge
* Most cloud providers

GitBash Commands :

* pwd - It fetch and gives us the 'Present Working Directory(pwd).

* cd - Change Directory to 'navigate around folders and files"

* cd .. - To return to the previous directory.

* ls - Gives us the content of the current working directory, i.e., the names of the files and folders inside that respective directory.

* cat "file name" - Gives out the content of a file inside the terminal/GitBash(read-only).

* ls -a - It shows all the hidden folders and files inside the present working directory.

* q - To quit/get-out of the pagers like "git log - pager". 

* git - Checks whether Git is installed on our local machine or not, if already installed, then will give all the other commands related to Git.

* git -v or git --version - To check the version of the Git installed.

* clear - Clears the Terminal.

* git config user.name - To check the username associated with the Git currently.

* git config --global user.name "Enter your username" - For changing the username and providing the context as 'global' to the Git.

* git config user.email - To check the email id associated with the Git currently.

* git config --global user.email "Enter your email id" - For changing the email id and providing the context as 'global' to the Git.

VI Text Editor Commands(should be run in the GitBash) :

* vi "file name" - Creates a file and opens it in a vi file editor.

* i - To insert anything into the file running the vi editor.

* Esc, :wq! - That means write and quit, which saves the file and also closes the vi text editor.

Git Commands :

* git init - To initialize a Local Git Repository, so that Git can perform Version Control for that particular project/folder and it should be run only once. After the initialization completes, one .git file gets created automatically called as (GIT DIR) or Git Directory.

* git status - Command to check the status of the "Git" VCS.

* git add "file name" - To add an untracked/unstaged file to the tracked/staged context(state).

* git rm --cached "file name" - To unstage/untrack a file that is already staged/tracked.

* git add . - To add all the files available in the untracked/unstaged context/area/state to the staging context(tracked state) all at once!

* git restore --staged . - To unstage/untrack all the files at once!

* git commit -m "commit message/description" - To commit or add commit messages/descriptions to the files that are in the staging area. This commands also helps in creating all the metadata regarding the commit, that can be referenced anytime and serve as a version of the project.

* git log - It will give the information about all the commits made till now.

* git log -n "no. of commits required" - Logs the number of commits specified (latest) only.

* git log --committer="user name" - Logs all the commits done by the person with the specified username.

* git log -n "no.of commits required" --committer="user name" - Logs the numbers of commits specified, by the person with the specified username.

* git show "commit ID" - Shows all the metadata regarding a particular commit Id including the changes made.

* git branch - To check all the available branches.
- The (*)symbol before a branch name shows the 'active branch'.

* git branch "branch name" - Creates a new branch specified with the name.

* git branch -d "branch name" - Deletes a branch specified with the name.

* git checkout "branch name" - To navigate to a branch specified with the name.

* git checkout -b "branch name" - To create and navigate to a new branch respectively at the same time. It uses two Git commands one after the other, i.e., (git branch "branch name") and then (git checkout "branch name").

* git checkout "commit ID" - Creates and navigates to a new temporary branch with Head detached.

* git switch -c "new branch name" - To give a name to a temporary branch with Head detached, that was created using a "commit ID" in the first place.

* (git switch -) - The branch will switch to its parent branch(the branch out of which it was created). (This command is not recommended as it does not falls under the 'best practice").

* git merge "branch name" - This will merge the branch specified with the branch in which this command is run.

* git merge --abort - To abort the merge.

* git log --merge - Logs the commits that let to a "Merge Conflict" at the first place.

* git clone "url" - To clone a Remote Git Repository using/specifying the web URL for that remote repo.

Steps to connect our Local Repo to a Remote Repo(GitHub.com) :
1. git branch -M master/main
2. git remote add origin "url"
3. git push -u origin master/main

* git branch -a - Shows all the branches present at the moment in the Remote Repo.

* git clone "url" - To clone a Remote Git Repository using/specifying the web URL for that remote repo.

* git branch -a - Shows all the branches present at the moment in the Remote Repo.

* git pull - To fetch commits/changes/version from the Remote Repo, it executes a two step process to fetch the changes from the Remote Repo, namely : 1. git fetch and followed by 2. git merge. Thus, it creates a merge commit as a result of this command.
To overcome this "Merge commit getting created", we use two commands one after the other, namely :
- git fetch - To fetch the changes from the Remote Repo to the Local Repo.
And then followed by the command :
- git rebase origin master/main - To sync the origin/master of Remote Repo to the master/main of Local Repo.
And thus, by these two above commands we can get read of "merge commits".


3.) Making changes to the Local Repository :

Stages of Git :

Stage 1 :
- Untracked or Unstaged : The stage where the files are not added to the staging area for the Git to track changes/versions.

Stage 2 :
- Tracked or Staged : The stage where the files are staged for tracking or performing version control.

Stage 3 :
- commit stage : The stage where the file is observed/tracked by the Git and we just need to commit the changes by providing a commit message to it. Commit message is mainly written as a "Giving instruction in Present Tense with authoritative tone".

Commonly used commands :

* git init - To initialize a Local Git Repository, so that Git can perform Version Control for that particular project/folder and it should be run only once. After the initialization completes, one .git file gets created automatically called as (GIT DIR) or Git Directory.

* git status - Command to check the status of the "Git" VCS.

* git add "file name" "file name"(optional) - To add an untracked/unstaged file to the tracked/staged context(state).

* git rm --cached "file name" "file name"(optional) - To unstage/untrack a file that is already staged/tracked.

* git add . - To add all the files available in the untracked/unstaged context/area/state to the staging context(tracked state) all at once!

* git restore --staged . - To unstage/untrack all the files at once!

* git commit -m "commit message/description" - To commit or add commit messages/descriptions to the files that are in the staging area. This commands also helps in creating all the metadata regarding the commit, that can be referenced anytime and serve as a version of the project.

* git log - It will give the information about all the commits made till now.

* git log -n "no. of commits required" - Logs the number of commits specified (latest) only.

* git log --committer="user name" - Logs all the commits done by the person with the specified username.

* git log -n "no.of commits required" --committer="user name" - Logs the numbers of commits specified, by the person with the specified username.

* git show "commit ID" - Shows all the metadata regarding a particular commit Id including the changes made.


4.) Branching in Git :

Question) - Why do we need branching in Git?
Answer) - We can understand the need of branching in Git by observing a scenario, like :
* Scenario : Consider, you have a running live website, and you want to add some new features to it. For this we can apply an approach:
* Approach 1 : Stop running the website and then make changes to the code in the master codebase.
* Approach 2 : Make changes to the code in the master codebase of the running website.
Note :
But these two approaches are not appropriate as they can create hindrance in the website status. So, we need a way where the master codebase of the website remains untouched until we complete updating the code of the new feature.
Hence, branching comes to the rescue in this intricate situation.
Branch can be created at a specific commit or instance as a copy of the master codebase, then developers can work on specific code instances and develop features independent of the master codebase and later merge it with master codebase without hampering the running website.

* Branch is a generally a copy of the master codebase, originating out of a specific commit or instance.

* Concept of branch is present in nearly all the Version Control System out there.

* When we first initialize git, it comes with a default branch named main or master.

* Branch provides isolation from the master codebase, so individual contributors can work independently and these branches can be termed as 'feature branches'.

Commonly used commands :

* git branch - To check all the available branches.
- The (*)symbol before a branch name shows the 'active branch'.

* git branch "branch name" - Creates a new branch specified with the name.

* git branch -d "branch name" - Deletes a branch specified with the name.

* git checkout "branch name" - To navigate to a branch specified with the name.

* git checkout -b "branch name" - To create and navigate to a new branch respectively at the same time. It uses two Git commands one after the other, i.e., (git branch "branch name") and then (git checkout "branch name").

* git checkout "commit ID" - Creates and navigates to a new temporary branch with Head detached.

* git switch -c "new branch name" - To give a name to a temporary branch with Head detached, that was created using a "commit ID" in the first place.

* (git switch -) - The branch will switch to its parent branch(the branch out of which it was created). (This command is not recommended as it does not falls under the 'best practice").

* git merge "branch name" - This will merge the branch specified with the branch in which this command is run.

* git merge --abort - To abort the merge.

* git log --merge - Logs the commits that let to a "Merge Conflict" at the first place.


5.) Syncing with the Central Repository :

Steps to connect our Local Repo to a Remote Repo(GitHub.com) :
1. git branch -M master/main
2. git remote add origin "url"
3. git push -u origin master/main

Common commands :

* git clone "url" - To clone a Remote Git Repository using/specifying the web URL for that remote repo.

* git branch -a - Shows all the branches present at the moment in the Remote Repo.

* git pull - To fetch commits/changes/version from the Remote Repo, it executes a two step process to fetch the changes from the Remote Repo, namely : 1. git fetch and followed by 2. git merge. Thus, it creates a merge commit as a result of this command.
To overcome this "Merge commit getting created", we use two commands one after the other, namely :
- git fetch - To fetch the changes from the Remote Repo to the Local Repo.
And then followed by the command :
- git rebase origin master/main - To sync the origin/master of Remote Repo to the master/main of Local Repo.
And thus, by these two above commands we can get read of "merge commits".

Common facts :

- If a repo from remote server is cloned onto local, then Git will already be initialized and it will be pre-ready for Version Control.

- All the branches of Remote Repo are not reflected inside the cloned Local Repo, in order to view those hidden branches run the command : git branch -a in your terminal/GitBash.

- All the commits made in Local Repo before connecting it to the Remote Repo will be preserved and will reflect in the Remote Repo after the connection.

- When we fetch commits/changes/version from the Remote Repo, we use the command : git pull, it executes a two step process to fetch the changes from the Remote Repo, namely : 1. git fetch and followed by 2. git merge. Thus, it creates a merge commit as a result of this command.
To overcome this "Merge commit getting created", we use two commands one after the other, namely :
- git fetch - To fetch the changes from the Remote Repo to the Local Repo.
And then followed by the command :
- git rebase origin master/main - To sync the origin/master of Remote Repo to the master/main of Local Repo.
And thus, by these two above commands we can get read of "merge commits".

Question) - What is the difference between git pull and git rebase commands?
Answer) - git pull creates a merge commit when we fetch the changes from the Remote Repo to our Local Repo.
